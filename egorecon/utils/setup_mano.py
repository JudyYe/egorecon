#!/usr/bin/env python3
"""
Setup script to configure MANO hand models for the project
"""
import os
import shutil

def setup_mano_models():
    """Setup MANO hand models in the expected locations"""
    
    # Define paths
    workspace_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
    mano_source_dir = os.path.join(workspace_root, "data", "mano_models")
    
    # Check if source MANO models exist
    left_mano_path = os.path.join(mano_source_dir, "MANO_LEFT.pkl")
    right_mano_path = os.path.join(mano_source_dir, "MANO_RIGHT.pkl")
    
    if not os.path.exists(left_mano_path):
        print(f"ERROR: Left MANO model not found at {left_mano_path}")
        return False
        
    if not os.path.exists(right_mano_path):
        print(f"ERROR: Right MANO model not found at {right_mano_path}")
        return False
    
    print("✓ Found MANO models in data/mano_models/")
    
    # Create symlinks or copies in common locations that libraries might expect
    common_locations = [
        os.path.expanduser("~/Downloads"),  # Original hot3d script expects this
        os.path.join(workspace_root, "mano_models"),  # Alternative location
    ]
    
    for location in common_locations:
        if not os.path.exists(location):
            os.makedirs(location, exist_ok=True)
            
        left_target = os.path.join(location, "MANO_LEFT.pkl")
        right_target = os.path.join(location, "MANO_RIGHT.pkl")
        
        # Create symlinks if they don't exist
        if not os.path.exists(left_target):
            try:
                os.symlink(left_mano_path, left_target)
                print(f"✓ Created symlink: {left_target}")
            except OSError:
                # If symlinks fail, copy the files
                shutil.copy2(left_mano_path, left_target)
                print(f"✓ Copied: {left_target}")
                
        if not os.path.exists(right_target):
            try:
                os.symlink(right_mano_path, right_target)
                print(f"✓ Created symlink: {right_target}")
            except OSError:
                # If symlinks fail, copy the files
                shutil.copy2(right_mano_path, right_target)
                print(f"✓ Copied: {right_target}")
    
    # Create a configuration file with the paths
    config_content = f"""# MANO Hand Model Configuration
# Generated by setup_mano.py

MANO_MODEL_PATH = "{mano_source_dir}"
MANO_LEFT_PATH = "{left_mano_path}"
MANO_RIGHT_PATH = "{right_mano_path}"
"""
    
    config_path = os.path.join(workspace_root, "mano_config.py")
    with open(config_path, 'w') as f:
        f.write(config_content)
    
    print(f"✓ Created configuration file: {config_path}")
    print("MANO setup complete!")
    return True

def verify_mano_setup():
    """Verify that MANO models are accessible"""
    try:
        # Try to import and check if models can be loaded
        import pickle
        
        workspace_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
        mano_source_dir = os.path.join(workspace_root, "data", "mano_models")
        
        left_path = os.path.join(mano_source_dir, "MANO_LEFT.pkl")
        right_path = os.path.join(mano_source_dir, "MANO_RIGHT.pkl")
        
        # Try to load the models
        with open(left_path, 'rb') as f:
            left_model = pickle.load(f)
        print("✓ Successfully loaded MANO_LEFT.pkl")
        
        with open(right_path, 'rb') as f:
            right_model = pickle.load(f)
        print("✓ Successfully loaded MANO_RIGHT.pkl")
        
        print("MANO verification complete!")
        return True
        
    except Exception as e:
        print(f"ERROR during MANO verification: {e}")
        return False

if __name__ == "__main__":
    print("Setting up MANO hand models...")
    success = setup_mano_models()
    
    if success:
        print("\nVerifying setup...")
        verify_mano_setup()
    else:
        print("Setup failed!")
